name: Build, Push Docker Image, SonarQube Scan, and Deploy

on:
  push:
    branches:
      - main  # Trigger workflow on push to the 'master' branch
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: self-hosted  # Ensure this matches your runner label

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker
        run: |
          if ! [ -x "$(command -v docker)" ]; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            newgrp docker
          fi
          # Ensure the Docker socket has correct permissions
          sudo chmod 666 /var/run/docker.sock

      - name: Docker Info
        run: docker info

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container  # Ensures Buildx uses the container driver

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: kishore1092001/simple-app:latest

      # - name: SonarQube Scan
      #   run: |
      #     docker run --rm \
      #       -e SONAR_HOST_URL=${{ secrets.SONARQUBE_URL }} \
      #       -e SONAR_TOKEN=${{ secrets.SONARQUBE_TOKEN }} \
      #       -v $(pwd):/usr/src \
      #       sonarsource/sonar-scanner-cli \
      #       -Dsonar.projectKey=action \
      #       -Dsonar.sources=. \
      #       -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} \
      #       -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull the latest Docker image
        run: docker pull kishore1092001/simple-app:latest

      - name: Stop and remove existing container
        run: |
          if [ "$(docker ps -q -f name=simple-app)" ]; then
            docker stop simple-app
            docker rm simple-app
          fi

      - name: Run new Docker container
        run: |
          docker run -d --name simple-app -p 80:80 kishore1092001/simple-app:latest
